/*
You should use the statndard input/output

in order to receive a score properly.

Do not use file input and output

Please be very careful.
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
using namespace std;

typedef struct distance {
	int firstIsland;
	int secondIsland;
	int dis;
}Distance;

int Answer;

vector<int> ansVec;
vector<pair<int, int>> vec;
vector<Distance> distanceVec;
int n;
int cnt = 0;
int arr[4000] = { 0, };

bool compare(Distance u, Distance v) {
	if (u.dis < v.dis)
		return true;
	else
		return false;
}

void Solution(int next) {
	for (int i = next; i < distanceVec.size(); i++) {
		ansVec.push_back(i);
		cnt++;

		if (cnt == n - 1) {
			// Check that we can duild bridges
			fill_n(arr, 4000, 0);
			int tempAnswer = 0;

			// All island connected by bridge would be calculated
			for (int j = 0; j < ansVec.size(); j++) {
				Distance temp;
				temp = distanceVec[ansVec[j]];
				arr[temp.firstIsland]++;
				arr[temp.secondIsland]++;
				tempAnswer += temp.dis;
			}

			//cout << tempAnswer << endl;

			int k;
			for (k = 0; k < n; k++) {
				if (arr[k] == 0)
					break;

				if (vec[k].second - arr[k] < 0) 
					break;
			}

			if (k == n)
				if(Answer > tempAnswer)
					Answer = tempAnswer;

			ansVec.pop_back();
			cnt--;

		}
		else {
			Solution(i + 1);
		}
	}

	if (ansVec.size() > 0) {
		ansVec.pop_back();
		cnt--;
	}
}

int main(int argc, char** argv)
{
	int T, test_case;

	//freopen("input.txt", "r", stdin);
	cin >> T;

	

	for (test_case = 0; test_case < T; test_case++)
	{

		Answer = 100000000;
		
		// Input the number of island
		
		cin >> n;
		//cout << "¼¶ÀÇ °³¼ö = " << n << endl;

		// Input island's infomation (Pi : coordinator of island , Di : maximum connection number)
		for (int i = 0; i < n; i++) {
			int p, d;
			cin >> p;
			cin >> d;
			vec.push_back(make_pair(p, d));
		}

		//sort(vec.begin(), vec.end());

		for (int i = 0; i < vec.size(); i++) {
			for (int j = i + 1; j < vec.size(); j++) {
				int dis = vec[i].first - vec[j].first;
				(dis < 0) ? dis = dis*-1 : 0;
				Distance temp;
				temp.firstIsland = i;
				temp.secondIsland = j;
				temp.dis = dis;
				distanceVec.push_back(temp);
			}
		}
		
		//sort(distanceVec.begin(), distanceVec.end(), compare);
		//Find Answer
		Solution(0);

		(Answer == 100000000) ? Answer = -1 : 0;
		// Print the answer to standard output(screen).
		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;

		vec.clear();
		ansVec.clear();
		distanceVec.clear();
	}

	return 0;//Your program should return 0 on normal termination.
}